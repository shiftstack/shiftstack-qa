- name: Print OCP cluster info
  block:
    - name: get osp instances
      shell: "openstack server list"
      environment:
        OS_CLOUD: "{{ user_cloud }}"

    - name: get load balancers
      shell: "openstack loadbalancer list"
      environment:
        OS_CLOUD: "{{ user_cloud }}"

    - name: get the disabled load balancers listeners
      shell: "openstack loadbalancer listener list --disable -f value"
      register: osp_lbs_listeners
      environment:
        OS_CLOUD: "{{ user_cloud }}"

    - name: print the disabled load balancers listeners
      debug:
        msg: |
          The following load balancers are in disabled state:
          {{ osp_lbs_listeners.stdout }}
      when: osp_lbs_listeners.stdout_lines|length > 0

    - name: Collect facts about master servers
      openstack.cloud.server_info:
       cloud: "{{ user_cloud }}"
       server: "{{ ocp_cluster_name }}*master*"
      register: result
      no_log: true

    - name: Create security group rule to allow ssh to master nodes
      openstack.cloud.security_group_rule:
        cloud: "{{ user_cloud }}"
        security_group: "{{ result.openstack_servers[0].security_groups[0].name }}"
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
        remote_ip_prefix: 0.0.0.0/0
      when: (result.openstack_servers | length) > 0

    - name: Create oc config directory .kube/
      file:
        path: ~/.kube
        state: directory

    - name: Copy oc config file to .kube/ dir
      file:
        src: "~/{{ ocp_cluster_name }}/auth/kubeconfig"
        dest: ~/.kube/config
        state: link

    - name: Gather the bootstrap logs
      block:
        - name: Gather bootstrap logs
          shell: |
            openshift-install gather bootstrap --dir {{ ocp_cluster_name }} --log-level=debug
          environment:
            SSH_AUTH_SOCK: ""
          ignore_errors: yes

        - name: Compress {{ installation_dir }} directory
          archive:
            path: "{{ installation_dir }}"
            dest: "{{ installation_dir }}.tar.gz"

        - name: Fetch {{ installation_dir }}.tar.gz to {{ inventory_dir }}
          fetch:
            src: "{{ installation_dir }}.tar.gz"
            dest: "{{ inventory_dir }}/failing_installation_logs.tar.gz"
            flat: yes
      when: gather_bootstrap|default(True)

    - name: Get ocp cluster version
      shell: oc get clusterversion

    - name: Get Instances, Machines, and MachineSets information
      include_tasks: debug_machines.yml

    - name: Get cluster operators
      shell: oc get co

    - name: Get all the non available Cluster Operators
      shell: for i in $(oc get co --no-headers=true| awk '$3 != "True" {print $1}');do echo -e "\n$i\n-----------\n";oc describe co $i;done

    - name: Get pods not running or completed
      shell: oc get pods -A | grep -v -e Running -e Completed

    - name: Get all cluster pods
      shell: oc get pods -A
  any_errors_fatal: false
