---
- name: Get the OCP installer and/or client binaries
  vars:
    installer_url: "{{ openshift_download_url }}/openshift-install-linux-{{ release_name }}.tar.gz"
    client_url: "{{ openshift_download_url }}/openshift-client-linux-{{ release_name }}.tar.gz"
  block:
    - name: Fail if release_name var is not defined
      ansible.builtin.fail:
        msg: "'release_name' variable must be defined and cannot be empty"
      when: release_name == ''

    - name: Wait for content to come up on {{ openshift_download_url }}
      ansible.builtin.uri:
        url: "{{ openshift_download_url }}"
        method: GET
        return_content: yes
        status_code: 200
        body_format: json
      register: result
      until: result.content.find("openshift-install-linux") != -1
      retries: 20
      delay: 60

    - name: Create the installer directory
      ansible.builtin.file:
        path: "{{ home_dir }}/{{ release_name }}"
        state: directory
        mode: u=rwx,g=rw,o=r

    - name: Get the installer binary and create a symlink
      when: "'installer' in binaries"
      block:
        - name: Download and unarchive the installer from {{ installer_url }}
          ansible.builtin.unarchive:
            src: "{{ installer_url }}"
            dest: "{{ home_dir }}/{{ release_name }}"
            remote_src: yes
          register: result
          until: result is not failed
          retries: 3
          delay: 10

        - name: Create a symlink to the openshift-install binary from /usr/local/bin
          ansible.builtin.file:
            src: "{{ home_dir }}/{{ release_name }}/openshift-install"
            dest: /usr/local/bin/openshift-install
            state: link
          become: true

    - name: Get the installer binary and create symlinks
      when: "'client' in binaries"
      block:
        - name: Download and unarchive the client from {{ client_url }}
          ansible.builtin.unarchive:
            src: "{{ client_url }}"
            dest: "{{ home_dir }}/{{ release_name }}"
            remote_src: yes
          register: result
          until: result is not failed
          retries: 3
          delay: 10

        - name: Create a symlink to the oc binary from /usr/local/bin
          ansible.builtin.file:
            src: "{{ home_dir }}/{{ release_name }}/oc"
            dest: /usr/local/bin/oc
            state: link
          become: true

        - name: Create a symlink to the kubectl binary from /usr/bin
          ansible.builtin.file:
            src: "{{ home_dir }}/{{ release_name }}/kubectl"
            dest: /usr/bin/kubectl
            state: link
          become: true
