---
# Obtain the OCP release build name and set the 'openshift_release_build_name' fact

# Calculate and set the the release name in the fact "openshift_release_build_name"
# based on the content of:
#  - "release":    It can be "4.10", "4.11", etc. or "4-stable"
#  - "build_name": It can be an empty value "", a given build
#                  "4.11.0-0.nightly-2022-08-26-005549" or "4.6.46", or any
#                  upgrade channel "candidate", "fast", "stable" or "eus".
#                  When empty the latest nightly will be calculated
- name: Get latest accepted build when build name is not specified from {{ release }}
  when: build_name == ''
  block:
    - name: Get the latest nightly accepted build information for {{ release }}
      vars:
        home_dir: "{{ '~' | expanduser }}"
      ansible.builtin.get_url:
        url: "{{ openshift_releasestream_url }}/{{ release }}.0-0.nightly/latest"
        dest: "{{ home_dir }}/latest_build.json"
        force: yes
        mode: u=rw,g=rw,o=r
      delegate_to: localhost
      when: release is not match("4-stable")

    - name: Get the latest 4-stable accepted build information
      vars:
        home_dir: "{{ '~' | expanduser }}"
      ansible.builtin.get_url:
        url: "{{ openshift_releasestream_url }}/4-stable/latest"
        dest: "{{ home_dir }}/latest_build.json"
        force: yes
        mode: u=rw,g=rw,o=r
      delegate_to: localhost
      when: release is match("4-stable")

      # the ansible.builtin.include_vars module is designed to include variable files from the control machine
    - name: Include vars for latest installer info
      vars:
        home_dir: "{{ '~' | expanduser }}"
      ansible.builtin.include_vars:
        file: "{{ home_dir }}/latest_build.json"
        name: latest_build_info

    - name: Set openshift_release_build_name when build_name is not defined
      ansible.builtin.set_fact:
        openshift_release_build_name: "{{ latest_build_info.name }}"

- name: Set openshift_release_build_name when a specific build is given
  ansible.builtin.set_fact:
    openshift_release_build_name: "{{ build_name }}"
  when:
    - release is not match("4-stable")
    - build_name not in ['','candidate','fast','stable','eus']

- name: Discover the release build name for the z-stream promoted to upgrade channel on {{ release }}
  # Ref: https://docs.openshift.com/container-platform/4.9/updating/understanding-upgrade-channels-release.html
  when:
    - release is not match("4-stable")
    - build_name != ''
    - build_name in ['candidate','fast','stable','eus']
  block:
    - name: Get release.txt from channel in {{ release }}
      ansible.builtin.get_url:
        url: "{{ openshift_mirror_url }}/{{ build_name }}-{{ release }}/release.txt"
        dest: "{{ home_dir }}/release.txt"
        force: yes
        mode: u=rw,g=rw,o=r

    - name: "Searching for a build name on release.txt"
      ansible.builtin.shell: set -o pipefail && grep '^Name:.*' {{ home_dir }}/release.txt | grep -Eo '[0-9].{5,}'
      changed_when: true
      register: result

    - name: Set openshift_release_build_name when openshift.build is set to a channel
      ansible.builtin.set_fact:
        openshift_release_build_name: "{{ result.stdout }}"
