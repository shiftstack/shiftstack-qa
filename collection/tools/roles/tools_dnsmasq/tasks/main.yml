---
- name: Assert that the required vars exist and are matching the expected content
  ansible.builtin.assert:
    that:
      - tools_dnsmasq_domains is defined
      - tools_dnsmasq_ips is defined
      - tools_dnsmasq_domains|length == tools_dnsmasq_ips|length

- name: Stop dnsmasq if running
  become: yes
  ansible.builtin.shell: "set -o pipefail && pkill dnsmasq || true"
  changed_when: true

- name: Ensure dnsmasq is installed
  become: true
  ansible.builtin.package:
    name: dnsmasq
    state: present

- name: Create /etc/dnsmasq.conf
  become: yes
  ansible.builtin.template:
    src: dnsmasq.j2
    dest: /etc/dnsmasq.conf
    mode: u=rw,g=r,o=r

- name: Backup the /etc/resolv.conf file
  become: true
  ansible.builtin.copy:
    remote_src: yes
    src: /etc/resolv.conf
    dest: /etc/resolv.conf.orig
    mode: u=rw,g=r,o=r
    force: no

- name: Start dnsmasq in the background
  become: yes
  ansible.builtin.command: "/usr/sbin/dnsmasq -r /etc/resolv.conf.orig"
  changed_when: true

- name: Verify dnsmasq is running
  become: yes
  ansible.builtin.command: "pgrep dnsmasq"
  changed_when: false

- name: Update nameserver in /etc/resolv.conf to localhost
  ansible.builtin.copy:
    content: |
      nameserver 127.0.0.1
      nameserver ::1
    dest: /etc/resolv.conf
    mode: u=rw,g=rw,o=r
    unsafe_writes: true

- name: Resolve DNS (IPv4 & IPv6)
  ansible.builtin.shell: |
    dig +short A example.{{ tools_dnsmasq_domains[0] }}
    dig +short AAAA example.{{ tools_dnsmasq_domains[0] }}
  register: resolved_ips_shell
  changed_when: false
  ignore_errors: true

- name: Verify the resolved IP (Supports both IPv4 and IPv6)
  ansible.builtin.assert:
    that:
      - tools_dnsmasq_ips[0] in resolved_ips_shell.stdout_lines
    fail_msg: |
      DNS resolution for example.{{ tools_dnsmasq_domains[0] }} did not return the expected IP.
      Expected: {{ tools_dnsmasq_ips[0] }}
      Resolved: {{ resolved_ips_shell.stdout_lines }}
    success_msg: |
      DNS resolution for example.{{ tools_dnsmasq_domains[0] }} returned the expected IP {{ tools_dnsmasq_ips[0] }}.
