---

# TO-DO: this playbook is not tested, and should implemented completely :) 

- name: Fetch and delete all OpenStack resources related to the project
  block:
    - name: Fetch instances
      command: >
        openstack --os-cloud "{{ user_cloud }}" server list -f json
      register: instances

    - name: Delete instances
      shell: >
        openstack --os-cloud "{{ user_cloud }}" server delete {{ item.ID }}
      with_items: "{{ instances.stdout | from_json }}"
      when: instances.stdout | from_json | length > 0

    - name: Fetch instances to verify deletion
      command: >
        openstack --os-cloud "{{ user_cloud }}" server list -f json
      register: instances_after_deletion

    - name: Fetch floating IPs
      command: >
        openstack --os-cloud "{{ user_cloud }}" floating ip list -f json
      register: floating_ips

    - name: Delete all floating IPs
      ansible.builtin.shell:
        cmd: "openstack floating ip delete {{ item['Floating IP Address'] }}"
      environment:
        OS_CLOUD: "{{ user_cloud }}"
      loop: "{{ floating_ips.stdout | from_json }}"
      when:
        - floating_ips.stdout | from_json | length > 0

    - name: Fetch ports
      command: >
        openstack --os-cloud "{{ user_cloud }}" port list -f json
      register: ports

    - name: Fetch routers
      command: >
        openstack --os-cloud "{{ user_cloud }}" router list -f json
      register: routers

    - name: Detach router interfaces
      shell: >
        openstack --os-cloud "{{ user_cloud }}" router remove port {{ item.router_id }} {{ item.port_id }}
      loop: >
        {{ (routers.stdout | from_json | map(attribute='ID') | product(ports.stdout | from_json | selectattr('device_owner', 'equalto', 'network:router_interface') | map(attribute='ID'))) | list | map('combine', [{'router_id': item[0]}, {'port_id': item[1]}]) }}
      when: routers.stdout | from_json | length > 0

    - name: Delete ports
      shell: >
        openstack --os-cloud "{{ user_cloud }}" port delete {{ item.ID }}
      with_items: "{{ ports.stdout | from_json }}"
      when: ports.stdout | from_json | length > 0

    - name: Fetch ports to verify deletion
      command: >
        openstack --os-cloud "{{ user_cloud }}" port list -f json
      register: ports_after_deletion

# TO-DO: you should seek in which project the installer host router is located.
    - name: Delete routers
      shell: >
        openstack --os-cloud "{{ user_cloud }}" router delete {{ item.ID }}
      with_items: "{{ routers.stdout | from_json }}"
      when: routers.stdout | from_json | length > 0

    - name: Fetch subnets
      command: >
        openstack --os-cloud "{{ user_cloud }}" subnet list -f json
      register: subnets

    - name: Delete subnets
      shell: >
        openstack --os-cloud "{{ user_cloud }}" subnet delete {{ item.ID }}
      with_items: "{{ subnets.stdout | from_json }}"
      when: subnets.stdout | from_json | length > 0

    - name: Fetch subnets to verify deletion
      command: >
        openstack --os-cloud "{{ user_cloud }}" subnet list -f json
      register: subnets_after_deletion

    - name: Fetch networks
      command: >
        openstack --os-cloud "{{ user_cloud }}" network list -f json
      register: networks

    - name: Delete networks
      shell: >
        openstack --os-cloud "{{ user_cloud }}" network delete {{ item.ID }}
      with_items: "{{ networks.stdout | from_json }}"
      when: networks.stdout | from_json | length > 0

    - name: Fetch networks to verify deletion
      command: >
        openstack --os-cloud "{{ user_cloud }}" network list -f json
      register: networks_after_deletion

    - name: Fetch volumes
      command: >
        openstack --os-cloud "{{ user_cloud }}" volume list --all-projects -f json
      register: all_volumes

    - name: Delete volumes
      shell: >
        openstack --os-cloud "{{ user_cloud }}" volume delete {{ item.ID }}
      with_items: "{{ all_volumes.stdout | from_json }}"
      when: all_volumes.stdout | from_json | length > 0

    - name: Fetch volumes to verify deletion
      command: >
        openstack --os-cloud "{{ user_cloud }}" volume list --all-projects -f json
      register: volumes_after_deletion

    # Uncomment and use the following section if you need to delete the project after all resources are cleaned up.
    # - name: Fetch project to delete
    #   command: >
    #     openstack --os-cloud "{{ user_cloud }}" project list -f json
    #   register: projects

    # - name: Delete project
    #   shell: >
    #     openstack --os-cloud "{{ user_cloud }}" project delete {{ project.id }}
