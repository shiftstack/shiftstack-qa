---
- name: Fetch all OpenStack resources related to the project
  block:
    - name: Get all instances in the project
      openstack.cloud.server_info:
        cloud: "{{ admin_cloud }}"
        filters:
          all_tenants: 1
          project_id: "{{ project.id }}"
      register: instances
  
    - name: Get all networks in the project
      openstack.cloud.networks_info:
        cloud: "{{ admin_cloud }}"
        filters:
          tenant_id: "{{ project.id }}"
      register: networks

    - name: Get all subnets in the project
      openstack.cloud.subnets_info:
        cloud: "{{ admin_cloud }}"
        filters:
          tenant_id: "{{ project.id }}"
      register: subnets

      register: subnets
    - name: Get all volumes in all projects
      openstack.cloud.volume_info:
        cloud: "{{ admin_cloud }}"
        all_projects: yes
      register: all_volumes

    - name: Check if volumes are present
      ansible.builtin.set_fact:
        volumes_present: "{{ 'openstack_volumes' in all_volumes }}"

    - name: Filter volumes by project_id
      ansible.builtin.set_fact:
        volumes: "{{ all_volumes.openstack_volumes | selectattr('os-vol-tenant-attr:tenant_id', 'equalto', project_id) | list }}"
      when: volumes_present

    - name: Get all floating IPs in the project
      openstack.cloud.floating_ip_info:
        cloud: "{{ admin_cloud }}"
        project_id: "{{ project.id }}"
      register: floating_ips

    - name: Fetch all ports in the subnet
      openstack.cloud.port_info:
        cloud: "{{ admin_cloud }}"
        filters:
          subnet_id: "{{ item.id }}"
      register: ports
      loop: "{{ subnets.openstack_subnets }}"
      when: subnets.openstack_subnets is defined

- name: Delete ports
  openstack.cloud.port:
    cloud: "{{ admin_cloud }}"
    state: absent
    id: "{{ item.id }}"
  loop: "{{ ports.results | map(attribute='openstack_ports') | flatten }}"
  when: ports.results | map(attribute='openstack_ports') | flatten | length > 0

- name: Delete floating IP
  ansible.builtin.shell: |
    openstack floating ip delete {{ item.floating_ip_address }}
  environment:
    OS_CLOUD: "{{ admin_cloud }}"
  loop: "{{ floating_ips.floating_ips }}"
  when:
    - floating_ips.floating_ips is defined
    - floating_ips.floating_ips | length > 0
  register: result
  changed_when: "'Deleted' in result.stdout"

- name: Delete all instances
  openstack.cloud.server:
    cloud: "{{ admin_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ instances.openstack_servers }}"

- name: Delete all subnets
  openstack.cloud.subnet:
    cloud: "{{ admin_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ subnets.openstack_subnets }}"

- name: Delete all networks
  openstack.cloud.network:
    cloud: "{{ admin_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ networks.openstack_networks }}"

- name: Delete all volumes
  openstack.cloud.volume:
    cloud: "{{ admin_cloud }}"
    state: absent
    display_name: "{{ item.display_name }}"
  loop: "{{ volumes.openstack_volumes }}"
  when: volumes_present

- name: Delete project
  openstack.cloud.project:
    cloud: "{{ admin_cloud }}"
    state: absent
    name: "{{ project.name }}"
