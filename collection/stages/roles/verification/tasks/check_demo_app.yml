- name: Get existing workers
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
    label_selectors:
      - node-role.kubernetes.io/worker
      - '!node-role.kubernetes.io/infra'
  register: workers

- name: Set the number of workers
  set_fact:
    num_workers: "{{ workers.resources|length }}"

- name: re-create "{{ demo_project_name }}" project
  include_role:
    name: ocp_project
    tasks_from: recreate_ocp_project.yml
  vars:
    project_name: "{{ demo_project_name }}"
    force_delete: "{{ not verify_existing_namespace|bool }}"

- name: create manifests for demo project
  template:
    src: demo.yaml.j2
    dest: "{{ home_dir }}/demo.yaml"

- name: Run the demo application for the "{{ demo_project_name }}" project
  kubernetes.core.k8s:
    state: present
    src: "{{ home_dir }}/demo.yaml"
    namespace: "{{ demo_project_name }}"
  when: not verify_existing_namespace

- name: Wait for Pods {{ num_workers|int }} labelled app=demo
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ demo_project_name }}"
    label_selectors:
      - app = demo
    field_selectors:
      - status.phase=Running
  register: demo_pods
  retries: "{{ wait_retries }}"
  delay: "{{ wait_delay }}"
  until: demo_pods.resources|length == num_workers|int

- name: Get the first pod
  set_fact:
    first_pod_name: "{{ demo_pods | json_query('resources[*].metadata.name') | first }} "

- name: Get the demo service
  kubernetes.core.k8s_info:
    kind: Service
    name: demo
    namespace: "{{ demo_project_name }}"
  register: demo_svc

- name: Get demo service IPs
  set_fact:
    demo_svc_ips: "{{ demo_svc | json_query('resources[0].spec.clusterIPs') }}"

- name: Set demo service IPv4 address
  set_fact:
    demo_svc_ipv4_ip: "{{ demo_svc_ips | select('match', ipv4_regex) | first }}"
  when: (demo_svc_ips | select('match', ipv4_regex) | list | length) > 0

- name: Set demo service IPv6 address
  set_fact:
    demo_svc_ipv6_ip: "{{ demo_svc_ips | select('match', ipv6_regex) | first }}"
  when: (demo_svc_ips | select('match', ipv6_regex) | list | length) > 0

- name: Check if both IPv4 and IPv6 IPs are defined for dualstack enabled
  assert:
    that:
      - demo_svc_ipv4_ip is defined
      - demo_svc_ipv6_ip is defined
  when: openshift_dualstack.enabled

- name: Test connectivity over IPv4
  shell: "oc exec -t {{ first_pod_name }} -n {{ demo_project_name }} -- curl -g {{ demo_svc_ipv4_ip }}"
  register: pod_ipv4_result
  retries: 30
  delay: 10
  until: pod_ipv4_result.stdout is search('HELLO! I AM ALIVE!!!')
  when: demo_svc_ipv4_ip is defined

- name: Test connectivity over IPv6
  shell: "oc exec -t {{ first_pod_name }} -n {{ demo_project_name }} -- curl -g [{{ demo_svc_ipv6_ip }}]"
  register: pod_ipv6_result
  retries: 30
  delay: 10
  until: pod_ipv6_result.stdout is search('HELLO! I AM ALIVE!!!')
  when: demo_svc_ipv6_ip is defined
