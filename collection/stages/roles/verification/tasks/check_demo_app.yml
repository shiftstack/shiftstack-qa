- name: Get existing workers
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
    label_selectors:
      - node-role.kubernetes.io/worker
      - '!node-role.kubernetes.io/infra'
  register: workers

- name: Set the number of workers
  set_fact:
    num_workers: "{{ workers.resources|length }}"

- name: re-create "{{ demo_project_name }}" project
  include_role:
    name: tools_ocp_project
    tasks_from: recreate_ocp_project.yml
  vars:
    project_name: "{{ demo_project_name }}"
    force_delete: "{{ not verify_existing_namespace|bool }}"

- name: create manifests for demo project
  template:
    src: demo.yaml.j2
    dest: "{{ home_dir }}/demo.yaml"

- name: Run the demo application for the "{{ demo_project_name }}" project
  kubernetes.core.k8s:
    state: present
    src: "{{ home_dir }}/demo.yaml"
    namespace: "{{ demo_project_name }}"
  when: not verify_existing_namespace

- name: Wait for Pods {{ num_workers|int }} labelled app=demo
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ demo_project_name }}"
    label_selectors:
      - app = demo
    field_selectors:
      - status.phase=Running
  register: demo_pods
  retries: "{{ wait_retries }}"
  delay: "{{ wait_delay }}"
  until: demo_pods.resources|length == num_workers|int

- name: Get the first pod
  set_fact:
    first_pod_name: "{{ demo_pods | json_query('resources[*].metadata.name') | first }} "

- name: Get the demo service
  kubernetes.core.k8s_info:
    kind: Service
    name: demo
    namespace: "{{ demo_project_name }}"
  register: demo_svc

- name: Get demo service IP
  set_fact:
    demo_svc_ip: "{{ demo_svc| json_query('resources[0].spec.clusterIP') }}"

- shell: "oc exec -t {{ first_pod_name }} -n {{ demo_project_name }} -- curl {{ demo_svc_ip }}"
  register: pod_result
  retries: 30
  delay: 10
  until: pod_result.stdout is search('HELLO! I AM ALIVE!!!')
