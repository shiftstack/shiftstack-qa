---
# Goal: Create pvcs using manila storage class and confirms they behave as expected
- name: "Create the {{ openshift_manila_type }} manila share type"
  ansible.builtin.command: "openstack share type create {{ openshift_manila_type }} false"
  environment:
    OS_CLOUD: "{{ admin_cloud }}"
  changed_when: true

- name: Get Storage class
  kubernetes.core.k8s_info:
    kind: StorageClass
    name: "csi-manila-{{ openshift_manila_type }}"
    kubeconfig: "{{ kubeconfig }}"
  register: scs
  retries: 60
  delay: 15
  until: scs.resources|length == 1

- name: "Delete the {{ openshift_manila_type }} manila share type"
  ansible.builtin.command: "openstack share type delete {{ openshift_manila_type }}"
  environment:
    OS_CLOUD: "{{ admin_cloud }}"
  changed_when: true

- name: Delete the storage class
  kubernetes.core.k8s:
    api_version: v1
    kind: StorageClass
    name: "csi-manila-{{ openshift_manila_type }}"

- name: Re-create {{ manila_project_name }} project
  ansible.builtin.include_role:
    name: tools_ocp_project
    tasks_from: recreate_ocp_project.yml
  vars:
    project_name: "{{ manila_project_name }}"
    force_delete: true

- name: Create manifests for {{ manila_project_name }} namespace
  ansible.builtin.template:
    src: manila.manifests.yaml.j2
    dest: "{{ home_dir }}/manila.manifests.yaml"
    mode: u=rw,g=rw,o=r

- name: Apply manifests for {{ manila_project_name }} namespace and check they are running
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    src: "{{ home_dir }}/manila.manifests.yaml"
    wait: yes
    wait_timeout: "{{ manifests_wait_timeout }}"

# Check that manila PVC is created on openstack
- name: Get created PVCs on {{ manila_project_name }}
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig }}"
    kind: pvc
    namespace: "{{ manila_project_name }}"
  register: existing_pvcs

- name: Set existing PVC IDs fact
  ansible.builtin.set_fact:
    existing_pvc_ids: "{{ existing_pvcs | json_query('resources[].spec.volumeName') | list }}"

- name: Check manila volume for PVC exist
  ansible.builtin.command: openstack share show "{{ item }}"
  environment:
    OS_CLOUD: "{{ user_cloud }}"
  changed_when: false
  loop: "{{ existing_pvc_ids }}"

# Check that writes/reads on the manila PVC are persistent across the pods (ReadWriteMany)
- name: Get pod names
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig }}"
    kind: Pod
    namespace: "{{ manila_project_name }}"
  register: demo_pods

- name: Store name of pods
  ansible.builtin.set_fact:
    pod_names: "{{ demo_pods | json_query('resources[*].metadata.name') | list }}"

- name: Create file on the PVC running on the first pod
  ansible.builtin.command: "oc exec -t {{ pod_names[0] }} -n {{ manila_project_name }} -- touch /var/lib/www/data/hello-{{ pod_names[0] }}"
  changed_when: true
  environment:
    KUBECONFIG: "{{ kubeconfig }}"

- name: Read file on the PVC running on the last pod
  ansible.builtin.command: "oc exec -t {{ pod_names[-1] }} -n {{ manila_project_name }} -- ls /var/lib/www/data/hello-{{ pod_names[0] }}"
  changed_when: false
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  register: output
  until: output.rc == 0
  retries: 6
  delay: 10
