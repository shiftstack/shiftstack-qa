- name: Obtain the OCP release build name and set the 'openshift_release_build_name' fact
  when: "'get_openshift_release_build_name' in actions"
  block:
    # Calculate and set the the release name in the fact "openshift_release_build_name"
    # based on the content of:
    #  - "release":    It can be "4.10", "4.11", etc. or "4-stable"
    #  - "build_name": It can be an empty value "", a given build
    #                  "4.11.0-0.nightly-2022-08-26-005549" or "4.6.46", or any
    #                  upgrade channel "candidate", "fast", "stable" or "eus".
    #                  When empty the latest nightly will be calculated
    - name: Get latest accepted build when build name is not specified from {{ release }}
      when: build_name == ''
      block:
        - name: Get the latest nightly accepted build information for {{ release }}
          ansible.builtin.get_url:
            url: "{{ openshift_releasestream_url }}/{{ release }}.0-0.nightly/latest"
            dest: "{{ output_dir }}//latest_build.json"
            force: yes
            mode: u=rw,g=rw,o=r
          delegate_to: localhost
          when: release is not match("4-stable")

        - name: Get the latest 4-stable accepted build information
          ansible.builtin.get_url:
            url: "{{ openshift_releasestream_url }}/4-stable/latest"
            dest: "{{ output_dir }}//latest_build.json"
            force: yes
            mode: u=rw,g=rw,o=r
          delegate_to: localhost
          when: release is match("4-stable")

        - name: Include vars for latest installer info
          ansible.builtin.include_vars:
            file: "{{ output_dir }}//latest_build.json"
            name: latest_build_info

        - name: Set openshift_release_build_name when build_name is not defined
          ansible.builtin.set_fact:
            openshift_release_build_name: "{{ latest_build_info.name }}"

    - name: Set openshift_release_build_name when a specific build is given
      ansible.builtin.set_fact:
        openshift_release_build_name: "{{ build_name }}"
      when:
        - release is not match("4-stable")
        - build_name not in ['','candidate','fast','stable','eus']

    - name: Discover the release build name for the z-stream promoted to upgrade channel on {{ release }}
      # Ref: https://docs.openshift.com/container-platform/4.9/updating/understanding-upgrade-channels-release.html
      when:
        - release is not match("4-stable")
        - build_name != ''
        - build_name in ['candidate','fast','stable','eus']
      block:
        - name: Get release.txt from channel in {{ release }}
          ansible.builtin.get_url:
            url: "{{ openshift_mirror_url }}/{{ build_name }}-{{ release }}/release.txt"
            dest: "{{ output_dir }}//release.txt"
            force: yes
            mode: u=rw,g=rw,o=r
          delegate_to: localhost

        - name: "Searching for a build name on release.txt"
          ansible.builtin.shell: set -o pipefail && grep '^Name:.*' {{ output_dir }}//release.txt | grep -Eo '[0-9].{5,}'
          changed_when: true
          register: result
          delegate_to: localhost

        - name: Set openshift_release_build_name when openshift.build is set to a channel
          ansible.builtin.set_fact:
            openshift_release_build_name: "{{ result.stdout }}"

- name: Get the OCP installer and/or client binaries
  vars:
    installer_url: "{{ openshift_download_url }}/openshift-install-linux-{{ release_name }}.tar.gz"
    client_url: "{{ openshift_download_url }}/openshift-client-linux-{{ release_name }}.tar.gz"
  when: "'get_openshift_release_binaries' in actions"
  block:
    - name: Fail if release_name var is not defined
      ansible.builtin.fail:
        msg: "'release_name' variable must be defined and cannot be empty"
      when: release_name == ''

    - name: Wait for content to come up on {{ openshift_download_url }}
      ansible.builtin.uri:
        url: "{{ openshift_download_url }}"
        method: GET
        return_content: yes
        status_code: 200
        body_format: json
      register: result
      until: result.content.find("openshift-install-linux") != -1
      retries: 20
      delay: 60

    - name: Create the installer directory
      ansible.builtin.file:
        path: "{{ output_dir }}/{{ release_name }}"
        state: directory
        mode: u=rw,g=rw,o=r

    - name: Get the installer binary and create a symlink
      when: "'installer' in binaries"
      block:
        - name: Download and unarchive the installer from {{ installer_url }}
          ansible.builtin.unarchive:
            src: "{{ installer_url }}"
            dest: "{{ output_dir }}/{{ release_name }}"
            remote_src: yes
          register: result
          until: result is not failed
          retries: 3
          delay: 10

        - name: Create a symlink to the openshift-install binary from /usr/local/bin
          ansible.builtin.file:
            src: "{{ output_dir }}/{{ release_name }}/openshift-install"
            dest: /usr/local/bin/openshift-install
            state: link
          become: true

    - name: Get the installer binary and create symlinks
      when: "'client' in binaries"
      block:
        - name: Download and unarchive the client from {{ client_url }}
          ansible.builtin.unarchive:
            src: "{{ client_url }}"
            dest: "{{ output_dir }}/{{ release_name }}"
            remote_src: yes
          register: result
          until: result is not failed
          retries: 3
          delay: 10

        - name: Create a symlink to the oc binary from /usr/local/bin
          ansible.builtin.file:
            src: "{{ output_dir }}/{{ release_name }}/oc"
            dest: /usr/local/bin/oc
            state: link
          become: true

        - name: Create a symlink to the kubectl binary from /usr/bin
          ansible.builtin.file:
            src: "{{ output_dir }}/{{ release_name }}/kubectl"
            dest: /usr/bin/kubectl
            state: link
          become: true
